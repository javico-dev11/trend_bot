"""
Bot de Telegram para An√°lisis de Criptomonedas
Permite consultar tendencias y an√°lisis t√©cnico desde Telegram
"""

import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from crypto_trend_detector import CryptoTrendDetector
import io

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Inicializar detector global
detector = CryptoTrendDetector(exchange_name='bybit')

# ============================================================================
# COMANDOS DEL BOT
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Mensaje de bienvenida"""
    welcome_message = """
ü§ñ **Bot de An√°lisis Crypto - ACTIVO**

Comandos disponibles:

üìä **An√°lisis:**
/analizar BTCUSDT - An√°lisis completo multi-timeframe
/quick ETHUSDT - An√°lisis r√°pido (solo consenso)
/precio BTCUSDT - Ver precio actual

üîç **B√∫squeda:**
/buscar BTC - Buscar s√≠mbolos disponibles

‚ÑπÔ∏è **Informaci√≥n:**
/help - Ver esta ayuda
/exchanges - Ver exchanges soportados

üí° **Ejemplos:**
`/analizar BTCUSDT`
`/analizar BTC/USDT`
`/quick ETHUSDT`
`/buscar COAI`

‚ö° El bot est√° optimizado para scalping y day trading.
Desarrollado con ‚ù§Ô∏è para traders.
    """
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /help"""
    await start(update, context)

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Comando /analizar SYMBOL - An√°lisis completo
    Ejemplo: /analizar BTCUSDT
    """
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto\n\n"
            "‚úÖ Uso correcto:\n"
            "/analizar BTCUSDT\n"
            "/analizar BTC/USDT\n"
            "/analizar ETHUSDT"
        )
        return
    
    symbol_input = context.args[0].upper()
    
    # Mensaje de espera
    wait_msg = await update.message.reply_text(
        f"üîÑ Analizando {symbol_input}...\n"
        "‚è≥ Esto puede tomar 10-15 segundos..."
    )
    
    try:
        # Normalizar s√≠mbolo
        symbol = detector.normalize_symbol(symbol_input)
        
        if symbol is None:
            # Buscar s√≠mbolos similares
            base_search = symbol_input.replace('USDT', '').replace('USD', '')
            matches = detector.search_symbol(base_search)
            
            error_msg = f"‚ùå S√≠mbolo '{symbol_input}' no encontrado\n\n"
            if matches:
                error_msg += "üí° ¬øQuisiste decir?\n"
                for match in matches[:5]:
                    error_msg += f"   ‚Ä¢ {match}\n"
                error_msg += "\nüí° Usa: /analizar S√çMBOLO_EXACTO"
            else:
                error_msg += "üí° No se encontraron s√≠mbolos similares"
            
            await wait_msg.edit_text(error_msg)
            return
        
        # Realizar an√°lisis completo
        result_text = await perform_full_analysis(symbol, detector)
        
        # Telegram tiene l√≠mite de 4096 caracteres
        if len(result_text) > 4096:
            # Dividir en m√∫ltiples mensajes
            parts = [result_text[i:i+4000] for i in range(0, len(result_text), 4000)]
            await wait_msg.delete()
            for part in parts:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await wait_msg.edit_text(result_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"Error en analyze: {e}")
        await wait_msg.edit_text(
            f"‚ùå Error al analizar {symbol_input}\n\n"
            f"Detalles: {str(e)}\n\n"
            "üí° Intenta de nuevo o usa /help"
        )

async def quick_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Comando /quick SYMBOL - An√°lisis r√°pido
    Ejemplo: /quick BTCUSDT
    """
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto\n\n"
            "‚úÖ Uso correcto: /quick BTCUSDT"
        )
        return
    
    symbol_input = context.args[0].upper()
    wait_msg = await update.message.reply_text(f"üîÑ Analizando {symbol_input}...")
    
    try:
        symbol = detector.normalize_symbol(symbol_input)
        if symbol is None:
            await wait_msg.edit_text(f"‚ùå S√≠mbolo '{symbol_input}' no encontrado")
            return
        
        # An√°lisis r√°pido solo del timeframe de 15m
        df = detector.get_ohlcv_data(symbol, '15m', limit=200)
        if df is None or len(df) < 50:
            await wait_msg.edit_text(f"‚ùå No hay datos suficientes para {symbol}")
            return
        
        df = detector.calculate_indicators(df)
        trend_info = detector.identify_trend(df)
        
        if trend_info is None:
            await wait_msg.edit_text(f"‚ùå No se pudo analizar {symbol}")
            return
        
        # Open Interest r√°pido
        oi_analysis = detector.analyze_open_interest(symbol, df)
        
        # Formatear respuesta r√°pida
        quick_result = f"""
üìä **An√°lisis R√°pido: {symbol}**

üí∞ **Precio:** ${trend_info['precio_actual']:.4f}
üìà **Tendencia (15m):** {trend_info['tendencia']}

**Indicadores:**
‚Ä¢ RSI: {trend_info['rsi']}
‚Ä¢ MACD: {trend_info['macd']}
‚Ä¢ ADX: {trend_info['adx']}
‚Ä¢ EMAs: {trend_info['ema_score']}

**Open Interest:**
"""
        if oi_analysis:
            quick_result += f"""‚Ä¢ OI: {oi_analysis['oi_actual']} ({oi_analysis['oi_cambio_24h']})
‚Ä¢ {oi_analysis['interpretacion']}
"""
        else:
            quick_result += "‚Ä¢ No disponible\n"
        
        quick_result += "\nüí° Usa /analizar para an√°lisis completo"
        
        await wait_msg.edit_text(quick_result, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error en quick_analysis: {e}")
        await wait_msg.edit_text(f"‚ùå Error: {str(e)}")

async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /precio SYMBOL - Ver precio actual"""
    if not context.args:
        await update.message.reply_text("‚ùå Uso: /precio BTCUSDT")
        return
    
    symbol_input = context.args[0].upper()
    
    try:
        symbol = detector.normalize_symbol(symbol_input)
        if symbol is None:
            await update.message.reply_text(f"‚ùå S√≠mbolo '{symbol_input}' no encontrado")
            return
        
        df = detector.get_ohlcv_data(symbol, '5m', limit=5)
        if df is None:
            await update.message.reply_text(f"‚ùå No se pudo obtener precio de {symbol}")
            return
        
        current_price = df['close'].iloc[-1]
        prev_price = df['close'].iloc[-2]
        change = ((current_price - prev_price) / prev_price) * 100
        
        emoji = "üü¢" if change > 0 else "üî¥" if change < 0 else "‚ö™"
        
        price_msg = f"""
{emoji} **{symbol}**

üí∞ Precio: **${current_price:.4f}**
üìä Cambio (5m): {change:+.2f}%
‚è∞ Actualizado: Ahora

üí° Usa /analizar {symbol_input} para m√°s detalles
        """
        await update.message.reply_text(price_msg, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error en get_price: {e}")
        await update.message.reply_text(f"‚ùå Error: {str(e)}")

async def search_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /buscar QUERY - Buscar s√≠mbolos"""
    if not context.args:
        await update.message.reply_text("‚ùå Uso: /buscar BTC")
        return
    
    query = context.args[0].upper()
    
    try:
        matches = detector.search_symbol(query)
        
        if matches:
            result = f"üîç **S√≠mbolos encontrados para '{query}':**\n\n"
            for match in matches[:10]:
                result += f"‚Ä¢ `{match}`\n"
            result += f"\nüí° Total: {len(matches)} s√≠mbolos"
            result += "\n\nüìä Usa: /analizar S√çMBOLO"
        else:
            result = f"‚ùå No se encontraron s√≠mbolos con '{query}'"
        
        await update.message.reply_text(result, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error en search_symbol: {e}")
        await update.message.reply_text(f"‚ùå Error: {str(e)}")

async def list_exchanges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /exchanges - Listar exchanges soportados"""
    exchanges_msg = """
üè¶ **Exchanges Soportados:**

‚úÖ Bybit (actual)
‚úÖ Binance
‚úÖ OKX
‚úÖ KuCoin
‚úÖ Coinbase
‚úÖ Kraken
‚úÖ Bitfinex

üí° Para cambiar exchange, contacta al administrador.
    """
    await update.message.reply_text(exchanges_msg, parse_mode='Markdown')

# ============================================================================
# FUNCI√ìN AUXILIAR PARA AN√ÅLISIS COMPLETO
# ============================================================================

async def perform_full_analysis(symbol, detector):
    """
    Realiza un an√°lisis completo y retorna texto formateado
    
    Args:
        symbol: S√≠mbolo normalizado
        detector: Instancia de CryptoTrendDetector
    
    Returns:
        String con an√°lisis completo formateado para Telegram
    """
    results = {}
    timeframes = ['5m', '15m', '1h', '4h']
    
    # An√°lisis por timeframe
    for tf in timeframes:
        df = detector.get_ohlcv_data(symbol, tf, limit=200)
        if df is not None and len(df) >= 50:
            df = detector.calculate_indicators(df)
            trend_info = detector.identify_trend(df)
            if trend_info:
                results[tf] = trend_info
    
    if not results:
        return f"‚ùå No hay datos suficientes para analizar {symbol}"
    
    # An√°lisis de OI
    df_oi = detector.get_ohlcv_data(symbol, '1h', limit=100)
    oi_analysis = None
    if df_oi is not None:
        oi_analysis = detector.analyze_open_interest(symbol, df_oi)
    
    # An√°lisis de riesgos
    risk_analysis = detector.analyze_risk_alerts(results, oi_analysis)
    
    # Generar recomendaci√≥n
    recommendation = None
    if risk_analysis:
        recommendation = detector.generate_trading_recommendation(results, oi_analysis, risk_analysis)
    
    # Niveles de precio
    df_levels = detector.get_ohlcv_data(symbol, '15m', limit=100)
    price_levels = None
    if df_levels is not None and len(df_levels) >= 50:
        df_levels = detector.calculate_indicators(df_levels)
        current_price = df_levels['close'].iloc[-1]
        atr = df_levels['atr'].iloc[-1]
        trend_direction = risk_analysis['consensus'] if risk_analysis else 'neutral'
        price_levels = detector.calculate_price_levels(df_levels, current_price, trend_direction, atr)
    
    # Formatear salida
    output = f"üìä **AN√ÅLISIS COMPLETO: {symbol}**\n\n"
    
    # Timeframes
    output += "**üìà Multi-Timeframe:**\n"
    for tf, data in results.items():
        output += f"‚Ä¢ {tf}: {data['tendencia']}\n"
    output += "\n"
    
    # Precio actual
    if results:
        first_tf = list(results.values())[0]
        output += f"üí∞ **Precio:** ${first_tf['precio_actual']:.4f}\n\n"
    
    # Open Interest
    if oi_analysis:
        output += "**üìä Open Interest:**\n"
        output += f"‚Ä¢ Actual: {oi_analysis['oi_actual']}\n"
        output += f"‚Ä¢ Cambio 24h: {oi_analysis['oi_cambio_24h']}\n"
        output += f"‚Ä¢ {oi_analysis['interpretacion']}\n\n"
    
    # Alertas de riesgo
    if risk_analysis and risk_analysis['alerts']:
        alerts = risk_analysis['alerts']
        if alerts['critico']:
            output += "üî¥ **ALERTAS CR√çTICAS:**\n"
            for alert in alerts['critico'][:2]:  # M√°ximo 2
                output += f"‚ùå {alert}\n"
            output += "\n"
        
        if alerts['alto']:
            output += "üü† **RIESGO ALTO:**\n"
            for alert in alerts['alto'][:2]:
                output += f"‚ö†Ô∏è {alert}\n"
            output += "\n"
    
    # Recomendaci√≥n
    if recommendation:
        output += "**üéØ RECOMENDACI√ìN:**\n"
        output += f"{recommendation['action']}\n"
        output += f"Score de riesgo: {recommendation['risk_score']}/16\n"
        output += f"Sesgo: {recommendation['bias']}\n\n"
    
    # Niveles de precio
    if price_levels and price_levels['tipo'] in ['LONG', 'SHORT']:
        output += f"**üí∞ NIVELES ({price_levels['tipo']}):**\n"
        output += f"‚Ä¢ Entrada: ${price_levels['entradas']['moderada']:.4f}\n"
        output += f"‚Ä¢ Stop Loss: ${price_levels['stop_loss']:.4f}\n"
        output += f"‚Ä¢ TP1: ${price_levels['take_profits']['tp1']:.4f} (R:R {price_levels['riesgo_recompensa']['tp1']}:1)\n"
        output += f"‚Ä¢ TP2: ${price_levels['take_profits']['tp2']:.4f} (R:R {price_levels['riesgo_recompensa']['tp2']}:1)\n\n"
    
    output += "‚úÖ An√°lisis completado"
    
    return output

# ============================================================================
# MANEJO DE ERRORES
# ============================================================================

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja errores del bot"""
    logger.error(f"Update {update} caus√≥ error: {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            "‚ùå Ocurri√≥ un error inesperado\n"
            "üí° Intenta de nuevo o usa /help"
        )

# ============================================================================
# MAIN - INICIAR BOT
# ============================================================================

def main():
    """Funci√≥n principal para iniciar el bot"""
    
    # Obtener token del bot de variable de entorno
    TOKEN = '8246019704:AAGi8nshsuSJMl5zJWeXH28OvnpDyWDTCGk'#os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå ERROR: No se encontr√≥ TELEGRAM_BOT_TOKEN")
        print("üí° Configura la variable de entorno:")
        print("   export TELEGRAM_BOT_TOKEN='tu_token_aqui'")
        print("\nüìñ Para obtener un token:")
        print("   1. Habla con @BotFather en Telegram")
        print("   2. Usa /newbot")
        print("   3. Sigue las instrucciones")
        print("   4. Copia el token generado")
        return
    
    # Crear aplicaci√≥n
    application = Application.builder().token(TOKEN).build()
    
    # Registrar comandos
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("analizar", analyze))
    application.add_handler(CommandHandler("quick", quick_analysis))
    application.add_handler(CommandHandler("precio", get_price))
    application.add_handler(CommandHandler("buscar", search_symbol))
    application.add_handler(CommandHandler("exchanges", list_exchanges))
    
    # Registrar error handler
    application.add_error_handler(error_handler)
    
    # Mensaje de inicio
    print("ü§ñ Bot de Telegram iniciado correctamente")
    print("‚úÖ Esperando comandos...")
    print("üí° Presiona Ctrl+C para detener el bot")
    print("\nüìã Comandos disponibles:")
    print("   /analizar BTCUSDT")
    print("   /quick ETHUSDT")
    print("   /precio BTCUSDT")
    print("   /buscar BTC")
    
    # Iniciar bot (long polling)
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()